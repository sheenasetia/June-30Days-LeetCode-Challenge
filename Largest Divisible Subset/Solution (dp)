class Solution {
    public List<Integer> largestDivisibleSubset(int[] arr) {
        if(arr.length==0)
            return new ArrayList<>();
        
        //keep track of the length of max subset till ith index 
        int divCount[] = new int[arr.length]; 
          Arrays.sort(arr);
        
        Arrays.fill(divCount, 1); 
  
        //keep track of previous num (because subset may not be continous)
        int prev[] = new int[arr.length]; 
        Arrays.fill(prev, -1); 
  
        //index which follows the max subset
        int max_ind = 0; 
  
        for (int i = 1; i < arr.length; i++) { 
            for (int j = 0; j < i; j++) { 
                if (arr[i] % arr[j] == 0 &&  
                    divCount[i] < divCount[j] + 1) { 
                    prev[i] = j; 
                    divCount[i] = divCount[j] + 1; 
  
                } 
                if (divCount[i] > divCount[max_ind]) 
                max_ind = i;
  
            } 
        } 
  
        int indices[]=new int[divCount[max_ind]];
        int i=0;
        int k = max_ind; 
        
        //traverse the subset in reverse order by using prev array
        while (k >= 0) { 
            indices[i]=k;
            k = prev[k];
            i++; 
        } 
      
        // because we got the series of indices in reverse order, therefore sort it.
        Arrays.sort(indices);
        List<Integer> al=new ArrayList<>();
        for(int j=0;j<divCount[max_ind];j++)
        {
            al.add(arr[indices[j]]);
        }
        return al;
    }
}
