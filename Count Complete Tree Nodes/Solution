public class Solution {

public int countNodes(TreeNode root) {

    int leftDepth = leftDepth(root);
	int rightDepth = rightDepth(root);

	if (leftDepth == rightDepth)
		return (1 << leftDepth) - 1;
	else
		return 1+countNodes(root.left) + countNodes(root.right);

}

private int rightDepth(TreeNode root) {
	
	int dep = 0;
	while (root != null) {
		root = root.right;
		dep++;
	}
	return dep;
}

private int leftDepth(TreeNode root) {
	
	int dep = 0;
	while (root != null) {
		root = root.left;
		dep++;
	}
	return dep;
}
}


// For those who are confused with (1 << leftDepth) - 1;

// This is done to find the nodes when depth is known.

// Suppose there are N nodes in a tree, Then depth=(log2(n+1))

// 1 node gives log2(2) = 1
// 3 nodes gives log2(4) = 2
// 7 nodes gives log2(8) = 3
// 15 nodes gives log2(16) = 4

// what we are doing in this line (1 << leftDepth) - 1 is given Depth we will find Number of nodes,
// N = (2^depth-)1.



//Approach-2 simple inorder traversal
/*
class Solution {
    int c=0;
    public int countNodes(TreeNode root) {
        fun(root);
        return c;  
    }
    
    public void fun(TreeNode root)
    {
        if(root==null)
            return;
        fun(root.left);
        c++;
        fun(root.right);  
    }
}*/
